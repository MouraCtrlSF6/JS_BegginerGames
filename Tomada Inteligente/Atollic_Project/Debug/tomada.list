
pilot_secondVersion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cc8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08000e8c  08000e8c  00010e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000e94  08000e94  00010e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000e98  08000e98  00010e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00010e9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000001c  20000000  08000e9c  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  2000001c  08000e9c  0002001c  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00010e9c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00000b7c  00000000  00000000  00010ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000002ca  00000000  00000000  00011a48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000000b8  00000000  00000000  00011d18  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00011dd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000004f9  00000000  00000000  00011e60  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000048a  00000000  00000000  00012359  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  000127e3  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000032c  00000000  00000000  00012860  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  00012b8c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000e74 	.word	0x08000e74

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000e74 	.word	0x08000e74

08000204 <__aeabi_drsub>:
 8000204:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000208:	e002      	b.n	8000210 <__adddf3>
 800020a:	bf00      	nop

0800020c <__aeabi_dsub>:
 800020c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000210 <__adddf3>:
 8000210:	b530      	push	{r4, r5, lr}
 8000212:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000216:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021a:	ea94 0f05 	teq	r4, r5
 800021e:	bf08      	it	eq
 8000220:	ea90 0f02 	teqeq	r0, r2
 8000224:	bf1f      	itttt	ne
 8000226:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000232:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000236:	f000 80e2 	beq.w	80003fe <__adddf3+0x1ee>
 800023a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000242:	bfb8      	it	lt
 8000244:	426d      	neglt	r5, r5
 8000246:	dd0c      	ble.n	8000262 <__adddf3+0x52>
 8000248:	442c      	add	r4, r5
 800024a:	ea80 0202 	eor.w	r2, r0, r2
 800024e:	ea81 0303 	eor.w	r3, r1, r3
 8000252:	ea82 0000 	eor.w	r0, r2, r0
 8000256:	ea83 0101 	eor.w	r1, r3, r1
 800025a:	ea80 0202 	eor.w	r2, r0, r2
 800025e:	ea81 0303 	eor.w	r3, r1, r3
 8000262:	2d36      	cmp	r5, #54	; 0x36
 8000264:	bf88      	it	hi
 8000266:	bd30      	pophi	{r4, r5, pc}
 8000268:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800026c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000270:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000274:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x70>
 800027a:	4240      	negs	r0, r0
 800027c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000280:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000284:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000288:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x84>
 800028e:	4252      	negs	r2, r2
 8000290:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000294:	ea94 0f05 	teq	r4, r5
 8000298:	f000 80a7 	beq.w	80003ea <__adddf3+0x1da>
 800029c:	f1a4 0401 	sub.w	r4, r4, #1
 80002a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a4:	db0d      	blt.n	80002c2 <__adddf3+0xb2>
 80002a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002aa:	fa22 f205 	lsr.w	r2, r2, r5
 80002ae:	1880      	adds	r0, r0, r2
 80002b0:	f141 0100 	adc.w	r1, r1, #0
 80002b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b8:	1880      	adds	r0, r0, r2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	4159      	adcs	r1, r3
 80002c0:	e00e      	b.n	80002e0 <__adddf3+0xd0>
 80002c2:	f1a5 0520 	sub.w	r5, r5, #32
 80002c6:	f10e 0e20 	add.w	lr, lr, #32
 80002ca:	2a01      	cmp	r2, #1
 80002cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d0:	bf28      	it	cs
 80002d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	18c0      	adds	r0, r0, r3
 80002dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e4:	d507      	bpl.n	80002f6 <__adddf3+0xe6>
 80002e6:	f04f 0e00 	mov.w	lr, #0
 80002ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fa:	d31b      	bcc.n	8000334 <__adddf3+0x124>
 80002fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000300:	d30c      	bcc.n	800031c <__adddf3+0x10c>
 8000302:	0849      	lsrs	r1, r1, #1
 8000304:	ea5f 0030 	movs.w	r0, r0, rrx
 8000308:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800030c:	f104 0401 	add.w	r4, r4, #1
 8000310:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000314:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000318:	f080 809a 	bcs.w	8000450 <__adddf3+0x240>
 800031c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000320:	bf08      	it	eq
 8000322:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000326:	f150 0000 	adcs.w	r0, r0, #0
 800032a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032e:	ea41 0105 	orr.w	r1, r1, r5
 8000332:	bd30      	pop	{r4, r5, pc}
 8000334:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000338:	4140      	adcs	r0, r0
 800033a:	eb41 0101 	adc.w	r1, r1, r1
 800033e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000342:	f1a4 0401 	sub.w	r4, r4, #1
 8000346:	d1e9      	bne.n	800031c <__adddf3+0x10c>
 8000348:	f091 0f00 	teq	r1, #0
 800034c:	bf04      	itt	eq
 800034e:	4601      	moveq	r1, r0
 8000350:	2000      	moveq	r0, #0
 8000352:	fab1 f381 	clz	r3, r1
 8000356:	bf08      	it	eq
 8000358:	3320      	addeq	r3, #32
 800035a:	f1a3 030b 	sub.w	r3, r3, #11
 800035e:	f1b3 0220 	subs.w	r2, r3, #32
 8000362:	da0c      	bge.n	800037e <__adddf3+0x16e>
 8000364:	320c      	adds	r2, #12
 8000366:	dd08      	ble.n	800037a <__adddf3+0x16a>
 8000368:	f102 0c14 	add.w	ip, r2, #20
 800036c:	f1c2 020c 	rsb	r2, r2, #12
 8000370:	fa01 f00c 	lsl.w	r0, r1, ip
 8000374:	fa21 f102 	lsr.w	r1, r1, r2
 8000378:	e00c      	b.n	8000394 <__adddf3+0x184>
 800037a:	f102 0214 	add.w	r2, r2, #20
 800037e:	bfd8      	it	le
 8000380:	f1c2 0c20 	rsble	ip, r2, #32
 8000384:	fa01 f102 	lsl.w	r1, r1, r2
 8000388:	fa20 fc0c 	lsr.w	ip, r0, ip
 800038c:	bfdc      	itt	le
 800038e:	ea41 010c 	orrle.w	r1, r1, ip
 8000392:	4090      	lslle	r0, r2
 8000394:	1ae4      	subs	r4, r4, r3
 8000396:	bfa2      	ittt	ge
 8000398:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800039c:	4329      	orrge	r1, r5
 800039e:	bd30      	popge	{r4, r5, pc}
 80003a0:	ea6f 0404 	mvn.w	r4, r4
 80003a4:	3c1f      	subs	r4, #31
 80003a6:	da1c      	bge.n	80003e2 <__adddf3+0x1d2>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc0e      	bgt.n	80003ca <__adddf3+0x1ba>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0220 	rsb	r2, r4, #32
 80003b4:	fa20 f004 	lsr.w	r0, r0, r4
 80003b8:	fa01 f302 	lsl.w	r3, r1, r2
 80003bc:	ea40 0003 	orr.w	r0, r0, r3
 80003c0:	fa21 f304 	lsr.w	r3, r1, r4
 80003c4:	ea45 0103 	orr.w	r1, r5, r3
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	f1c4 040c 	rsb	r4, r4, #12
 80003ce:	f1c4 0220 	rsb	r2, r4, #32
 80003d2:	fa20 f002 	lsr.w	r0, r0, r2
 80003d6:	fa01 f304 	lsl.w	r3, r1, r4
 80003da:	ea40 0003 	orr.w	r0, r0, r3
 80003de:	4629      	mov	r1, r5
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	fa21 f004 	lsr.w	r0, r1, r4
 80003e6:	4629      	mov	r1, r5
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	f094 0f00 	teq	r4, #0
 80003ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f2:	bf06      	itte	eq
 80003f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f8:	3401      	addeq	r4, #1
 80003fa:	3d01      	subne	r5, #1
 80003fc:	e74e      	b.n	800029c <__adddf3+0x8c>
 80003fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000402:	bf18      	it	ne
 8000404:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000408:	d029      	beq.n	800045e <__adddf3+0x24e>
 800040a:	ea94 0f05 	teq	r4, r5
 800040e:	bf08      	it	eq
 8000410:	ea90 0f02 	teqeq	r0, r2
 8000414:	d005      	beq.n	8000422 <__adddf3+0x212>
 8000416:	ea54 0c00 	orrs.w	ip, r4, r0
 800041a:	bf04      	itt	eq
 800041c:	4619      	moveq	r1, r3
 800041e:	4610      	moveq	r0, r2
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea91 0f03 	teq	r1, r3
 8000426:	bf1e      	ittt	ne
 8000428:	2100      	movne	r1, #0
 800042a:	2000      	movne	r0, #0
 800042c:	bd30      	popne	{r4, r5, pc}
 800042e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000432:	d105      	bne.n	8000440 <__adddf3+0x230>
 8000434:	0040      	lsls	r0, r0, #1
 8000436:	4149      	adcs	r1, r1
 8000438:	bf28      	it	cs
 800043a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000444:	bf3c      	itt	cc
 8000446:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044a:	bd30      	popcc	{r4, r5, pc}
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000454:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000458:	f04f 0000 	mov.w	r0, #0
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000462:	bf1a      	itte	ne
 8000464:	4619      	movne	r1, r3
 8000466:	4610      	movne	r0, r2
 8000468:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800046c:	bf1c      	itt	ne
 800046e:	460b      	movne	r3, r1
 8000470:	4602      	movne	r2, r0
 8000472:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000476:	bf06      	itte	eq
 8000478:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800047c:	ea91 0f03 	teqeq	r1, r3
 8000480:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	bf00      	nop

08000488 <__aeabi_ui2d>:
 8000488:	f090 0f00 	teq	r0, #0
 800048c:	bf04      	itt	eq
 800048e:	2100      	moveq	r1, #0
 8000490:	4770      	bxeq	lr
 8000492:	b530      	push	{r4, r5, lr}
 8000494:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000498:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049c:	f04f 0500 	mov.w	r5, #0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e750      	b.n	8000348 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_i2d>:
 80004a8:	f090 0f00 	teq	r0, #0
 80004ac:	bf04      	itt	eq
 80004ae:	2100      	moveq	r1, #0
 80004b0:	4770      	bxeq	lr
 80004b2:	b530      	push	{r4, r5, lr}
 80004b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c0:	bf48      	it	mi
 80004c2:	4240      	negmi	r0, r0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e73e      	b.n	8000348 <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_f2d>:
 80004cc:	0042      	lsls	r2, r0, #1
 80004ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004da:	bf1f      	itttt	ne
 80004dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e8:	4770      	bxne	lr
 80004ea:	f092 0f00 	teq	r2, #0
 80004ee:	bf14      	ite	ne
 80004f0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f4:	4770      	bxeq	lr
 80004f6:	b530      	push	{r4, r5, lr}
 80004f8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000500:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000504:	e720      	b.n	8000348 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_ul2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f04f 0500 	mov.w	r5, #0
 8000516:	e00a      	b.n	800052e <__aeabi_l2d+0x16>

08000518 <__aeabi_l2d>:
 8000518:	ea50 0201 	orrs.w	r2, r0, r1
 800051c:	bf08      	it	eq
 800051e:	4770      	bxeq	lr
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000526:	d502      	bpl.n	800052e <__aeabi_l2d+0x16>
 8000528:	4240      	negs	r0, r0
 800052a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800052e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000532:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000536:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053a:	f43f aedc 	beq.w	80002f6 <__adddf3+0xe6>
 800053e:	f04f 0203 	mov.w	r2, #3
 8000542:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000546:	bf18      	it	ne
 8000548:	3203      	addne	r2, #3
 800054a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054e:	bf18      	it	ne
 8000550:	3203      	addne	r2, #3
 8000552:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000556:	f1c2 0320 	rsb	r3, r2, #32
 800055a:	fa00 fc03 	lsl.w	ip, r0, r3
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 fe03 	lsl.w	lr, r1, r3
 8000566:	ea40 000e 	orr.w	r0, r0, lr
 800056a:	fa21 f102 	lsr.w	r1, r1, r2
 800056e:	4414      	add	r4, r2
 8000570:	e6c1      	b.n	80002f6 <__adddf3+0xe6>
 8000572:	bf00      	nop

08000574 <__aeabi_dmul>:
 8000574:	b570      	push	{r4, r5, r6, lr}
 8000576:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800057a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800057e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000582:	bf1d      	ittte	ne
 8000584:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000588:	ea94 0f0c 	teqne	r4, ip
 800058c:	ea95 0f0c 	teqne	r5, ip
 8000590:	f000 f8de 	bleq	8000750 <__aeabi_dmul+0x1dc>
 8000594:	442c      	add	r4, r5
 8000596:	ea81 0603 	eor.w	r6, r1, r3
 800059a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800059e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005a6:	bf18      	it	ne
 80005a8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b4:	d038      	beq.n	8000628 <__aeabi_dmul+0xb4>
 80005b6:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ba:	f04f 0500 	mov.w	r5, #0
 80005be:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005c6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ca:	f04f 0600 	mov.w	r6, #0
 80005ce:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d2:	f09c 0f00 	teq	ip, #0
 80005d6:	bf18      	it	ne
 80005d8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005dc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005e8:	d204      	bcs.n	80005f4 <__aeabi_dmul+0x80>
 80005ea:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ee:	416d      	adcs	r5, r5
 80005f0:	eb46 0606 	adc.w	r6, r6, r6
 80005f4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005f8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005fc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000600:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000604:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000608:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800060c:	bf88      	it	hi
 800060e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000612:	d81e      	bhi.n	8000652 <__aeabi_dmul+0xde>
 8000614:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000618:	bf08      	it	eq
 800061a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800061e:	f150 0000 	adcs.w	r0, r0, #0
 8000622:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800062c:	ea46 0101 	orr.w	r1, r6, r1
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	ea81 0103 	eor.w	r1, r1, r3
 8000638:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800063c:	bfc2      	ittt	gt
 800063e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000642:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000646:	bd70      	popgt	{r4, r5, r6, pc}
 8000648:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800064c:	f04f 0e00 	mov.w	lr, #0
 8000650:	3c01      	subs	r4, #1
 8000652:	f300 80ab 	bgt.w	80007ac <__aeabi_dmul+0x238>
 8000656:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800065a:	bfde      	ittt	le
 800065c:	2000      	movle	r0, #0
 800065e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000662:	bd70      	pople	{r4, r5, r6, pc}
 8000664:	f1c4 0400 	rsb	r4, r4, #0
 8000668:	3c20      	subs	r4, #32
 800066a:	da35      	bge.n	80006d8 <__aeabi_dmul+0x164>
 800066c:	340c      	adds	r4, #12
 800066e:	dc1b      	bgt.n	80006a8 <__aeabi_dmul+0x134>
 8000670:	f104 0414 	add.w	r4, r4, #20
 8000674:	f1c4 0520 	rsb	r5, r4, #32
 8000678:	fa00 f305 	lsl.w	r3, r0, r5
 800067c:	fa20 f004 	lsr.w	r0, r0, r4
 8000680:	fa01 f205 	lsl.w	r2, r1, r5
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800068c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	fa21 f604 	lsr.w	r6, r1, r4
 8000698:	eb42 0106 	adc.w	r1, r2, r6
 800069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a0:	bf08      	it	eq
 80006a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f1c4 040c 	rsb	r4, r4, #12
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f304 	lsl.w	r3, r0, r4
 80006b4:	fa20 f005 	lsr.w	r0, r0, r5
 80006b8:	fa01 f204 	lsl.w	r2, r1, r4
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	f141 0100 	adc.w	r1, r1, #0
 80006cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d0:	bf08      	it	eq
 80006d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d6:	bd70      	pop	{r4, r5, r6, pc}
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f205 	lsl.w	r2, r0, r5
 80006e0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e4:	fa20 f304 	lsr.w	r3, r0, r4
 80006e8:	fa01 f205 	lsl.w	r2, r1, r5
 80006ec:	ea43 0302 	orr.w	r3, r3, r2
 80006f0:	fa21 f004 	lsr.w	r0, r1, r4
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	fa21 f204 	lsr.w	r2, r1, r4
 80006fc:	ea20 0002 	bic.w	r0, r0, r2
 8000700:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000704:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000708:	bf08      	it	eq
 800070a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f094 0f00 	teq	r4, #0
 8000714:	d10f      	bne.n	8000736 <__aeabi_dmul+0x1c2>
 8000716:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800071a:	0040      	lsls	r0, r0, #1
 800071c:	eb41 0101 	adc.w	r1, r1, r1
 8000720:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000724:	bf08      	it	eq
 8000726:	3c01      	subeq	r4, #1
 8000728:	d0f7      	beq.n	800071a <__aeabi_dmul+0x1a6>
 800072a:	ea41 0106 	orr.w	r1, r1, r6
 800072e:	f095 0f00 	teq	r5, #0
 8000732:	bf18      	it	ne
 8000734:	4770      	bxne	lr
 8000736:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800073a:	0052      	lsls	r2, r2, #1
 800073c:	eb43 0303 	adc.w	r3, r3, r3
 8000740:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000744:	bf08      	it	eq
 8000746:	3d01      	subeq	r5, #1
 8000748:	d0f7      	beq.n	800073a <__aeabi_dmul+0x1c6>
 800074a:	ea43 0306 	orr.w	r3, r3, r6
 800074e:	4770      	bx	lr
 8000750:	ea94 0f0c 	teq	r4, ip
 8000754:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000758:	bf18      	it	ne
 800075a:	ea95 0f0c 	teqne	r5, ip
 800075e:	d00c      	beq.n	800077a <__aeabi_dmul+0x206>
 8000760:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000764:	bf18      	it	ne
 8000766:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076a:	d1d1      	bne.n	8000710 <__aeabi_dmul+0x19c>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f04f 0000 	mov.w	r0, #0
 8000778:	bd70      	pop	{r4, r5, r6, pc}
 800077a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800077e:	bf06      	itte	eq
 8000780:	4610      	moveq	r0, r2
 8000782:	4619      	moveq	r1, r3
 8000784:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000788:	d019      	beq.n	80007be <__aeabi_dmul+0x24a>
 800078a:	ea94 0f0c 	teq	r4, ip
 800078e:	d102      	bne.n	8000796 <__aeabi_dmul+0x222>
 8000790:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000794:	d113      	bne.n	80007be <__aeabi_dmul+0x24a>
 8000796:	ea95 0f0c 	teq	r5, ip
 800079a:	d105      	bne.n	80007a8 <__aeabi_dmul+0x234>
 800079c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a0:	bf1c      	itt	ne
 80007a2:	4610      	movne	r0, r2
 80007a4:	4619      	movne	r1, r3
 80007a6:	d10a      	bne.n	80007be <__aeabi_dmul+0x24a>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007c6:	bd70      	pop	{r4, r5, r6, pc}

080007c8 <__aeabi_ddiv>:
 80007c8:	b570      	push	{r4, r5, r6, lr}
 80007ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007d6:	bf1d      	ittte	ne
 80007d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007dc:	ea94 0f0c 	teqne	r4, ip
 80007e0:	ea95 0f0c 	teqne	r5, ip
 80007e4:	f000 f8a7 	bleq	8000936 <__aeabi_ddiv+0x16e>
 80007e8:	eba4 0405 	sub.w	r4, r4, r5
 80007ec:	ea81 0e03 	eor.w	lr, r1, r3
 80007f0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007f8:	f000 8088 	beq.w	800090c <__aeabi_ddiv+0x144>
 80007fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000800:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000804:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000808:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800080c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000810:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000814:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000818:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800081c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000820:	429d      	cmp	r5, r3
 8000822:	bf08      	it	eq
 8000824:	4296      	cmpeq	r6, r2
 8000826:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800082a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800082e:	d202      	bcs.n	8000836 <__aeabi_ddiv+0x6e>
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	1ab6      	subs	r6, r6, r2
 8000838:	eb65 0503 	sbc.w	r5, r5, r3
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000846:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800084a:	ebb6 0e02 	subs.w	lr, r6, r2
 800084e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000852:	bf22      	ittt	cs
 8000854:	1ab6      	subcs	r6, r6, r2
 8000856:	4675      	movcs	r5, lr
 8000858:	ea40 000c 	orrcs.w	r0, r0, ip
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	ebb6 0e02 	subs.w	lr, r6, r2
 8000866:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086a:	bf22      	ittt	cs
 800086c:	1ab6      	subcs	r6, r6, r2
 800086e:	4675      	movcs	r5, lr
 8000870:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	ebb6 0e02 	subs.w	lr, r6, r2
 800087e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000882:	bf22      	ittt	cs
 8000884:	1ab6      	subcs	r6, r6, r2
 8000886:	4675      	movcs	r5, lr
 8000888:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800088c:	085b      	lsrs	r3, r3, #1
 800088e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000892:	ebb6 0e02 	subs.w	lr, r6, r2
 8000896:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089a:	bf22      	ittt	cs
 800089c:	1ab6      	subcs	r6, r6, r2
 800089e:	4675      	movcs	r5, lr
 80008a0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a4:	ea55 0e06 	orrs.w	lr, r5, r6
 80008a8:	d018      	beq.n	80008dc <__aeabi_ddiv+0x114>
 80008aa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ae:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008b6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ba:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008be:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008c6:	d1c0      	bne.n	800084a <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	d10b      	bne.n	80008e6 <__aeabi_ddiv+0x11e>
 80008ce:	ea41 0100 	orr.w	r1, r1, r0
 80008d2:	f04f 0000 	mov.w	r0, #0
 80008d6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008da:	e7b6      	b.n	800084a <__aeabi_ddiv+0x82>
 80008dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e0:	bf04      	itt	eq
 80008e2:	4301      	orreq	r1, r0
 80008e4:	2000      	moveq	r0, #0
 80008e6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ea:	bf88      	it	hi
 80008ec:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f0:	f63f aeaf 	bhi.w	8000652 <__aeabi_dmul+0xde>
 80008f4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008f8:	bf04      	itt	eq
 80008fa:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000902:	f150 0000 	adcs.w	r0, r0, #0
 8000906:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090a:	bd70      	pop	{r4, r5, r6, pc}
 800090c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000910:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000914:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000918:	bfc2      	ittt	gt
 800091a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800091e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000922:	bd70      	popgt	{r4, r5, r6, pc}
 8000924:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000928:	f04f 0e00 	mov.w	lr, #0
 800092c:	3c01      	subs	r4, #1
 800092e:	e690      	b.n	8000652 <__aeabi_dmul+0xde>
 8000930:	ea45 0e06 	orr.w	lr, r5, r6
 8000934:	e68d      	b.n	8000652 <__aeabi_dmul+0xde>
 8000936:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093a:	ea94 0f0c 	teq	r4, ip
 800093e:	bf08      	it	eq
 8000940:	ea95 0f0c 	teqeq	r5, ip
 8000944:	f43f af3b 	beq.w	80007be <__aeabi_dmul+0x24a>
 8000948:	ea94 0f0c 	teq	r4, ip
 800094c:	d10a      	bne.n	8000964 <__aeabi_ddiv+0x19c>
 800094e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000952:	f47f af34 	bne.w	80007be <__aeabi_dmul+0x24a>
 8000956:	ea95 0f0c 	teq	r5, ip
 800095a:	f47f af25 	bne.w	80007a8 <__aeabi_dmul+0x234>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e72c      	b.n	80007be <__aeabi_dmul+0x24a>
 8000964:	ea95 0f0c 	teq	r5, ip
 8000968:	d106      	bne.n	8000978 <__aeabi_ddiv+0x1b0>
 800096a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800096e:	f43f aefd 	beq.w	800076c <__aeabi_dmul+0x1f8>
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	e722      	b.n	80007be <__aeabi_dmul+0x24a>
 8000978:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800097c:	bf18      	it	ne
 800097e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000982:	f47f aec5 	bne.w	8000710 <__aeabi_dmul+0x19c>
 8000986:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098a:	f47f af0d 	bne.w	80007a8 <__aeabi_dmul+0x234>
 800098e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000992:	f47f aeeb 	bne.w	800076c <__aeabi_dmul+0x1f8>
 8000996:	e712      	b.n	80007be <__aeabi_dmul+0x24a>

08000998 <__aeabi_d2f>:
 8000998:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800099c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009a0:	bf24      	itt	cs
 80009a2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009a6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009aa:	d90d      	bls.n	80009c8 <__aeabi_d2f+0x30>
 80009ac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009b0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009b4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009b8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009bc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009c0:	bf08      	it	eq
 80009c2:	f020 0001 	biceq.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009cc:	d121      	bne.n	8000a12 <__aeabi_d2f+0x7a>
 80009ce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009d2:	bfbc      	itt	lt
 80009d4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009d8:	4770      	bxlt	lr
 80009da:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009de:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009e2:	f1c2 0218 	rsb	r2, r2, #24
 80009e6:	f1c2 0c20 	rsb	ip, r2, #32
 80009ea:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ee:	fa20 f002 	lsr.w	r0, r0, r2
 80009f2:	bf18      	it	ne
 80009f4:	f040 0001 	orrne.w	r0, r0, #1
 80009f8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009fc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a04:	ea40 000c 	orr.w	r0, r0, ip
 8000a08:	fa23 f302 	lsr.w	r3, r3, r2
 8000a0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a10:	e7cc      	b.n	80009ac <__aeabi_d2f+0x14>
 8000a12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a16:	d107      	bne.n	8000a28 <__aeabi_d2f+0x90>
 8000a18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a1c:	bf1e      	ittt	ne
 8000a1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a26:	4770      	bxne	lr
 8000a28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop

08000a38 <calcUsartDiv>:
#endif /* CMSIS_DEVICE_ST_SETSERIAL_H_ */

#include "stm32f4xx.h"
#include "stm32f4xx.h"

float calcUsartDiv(int baud, int over8){
 8000a38:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000a3c:	b084      	sub	sp, #16
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	6078      	str	r0, [r7, #4]
 8000a42:	6039      	str	r1, [r7, #0]
	const float fck = 16000000.0;
 8000a44:	4b1e      	ldr	r3, [pc, #120]	; (8000ac0 <calcUsartDiv+0x88>)
 8000a46:	60fb      	str	r3, [r7, #12]
	return fck/(8.0 * (2.0 - over8) * baud);
 8000a48:	68f8      	ldr	r0, [r7, #12]
 8000a4a:	f7ff fd3f 	bl	80004cc <__aeabi_f2d>
 8000a4e:	4604      	mov	r4, r0
 8000a50:	460d      	mov	r5, r1
 8000a52:	6838      	ldr	r0, [r7, #0]
 8000a54:	f7ff fd28 	bl	80004a8 <__aeabi_i2d>
 8000a58:	4602      	mov	r2, r0
 8000a5a:	460b      	mov	r3, r1
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000a64:	f7ff fbd2 	bl	800020c <__aeabi_dsub>
 8000a68:	4602      	mov	r2, r0
 8000a6a:	460b      	mov	r3, r1
 8000a6c:	4610      	mov	r0, r2
 8000a6e:	4619      	mov	r1, r3
 8000a70:	f04f 0200 	mov.w	r2, #0
 8000a74:	4b13      	ldr	r3, [pc, #76]	; (8000ac4 <calcUsartDiv+0x8c>)
 8000a76:	f7ff fd7d 	bl	8000574 <__aeabi_dmul>
 8000a7a:	4602      	mov	r2, r0
 8000a7c:	460b      	mov	r3, r1
 8000a7e:	4690      	mov	r8, r2
 8000a80:	4699      	mov	r9, r3
 8000a82:	6878      	ldr	r0, [r7, #4]
 8000a84:	f7ff fd10 	bl	80004a8 <__aeabi_i2d>
 8000a88:	4602      	mov	r2, r0
 8000a8a:	460b      	mov	r3, r1
 8000a8c:	4640      	mov	r0, r8
 8000a8e:	4649      	mov	r1, r9
 8000a90:	f7ff fd70 	bl	8000574 <__aeabi_dmul>
 8000a94:	4602      	mov	r2, r0
 8000a96:	460b      	mov	r3, r1
 8000a98:	4620      	mov	r0, r4
 8000a9a:	4629      	mov	r1, r5
 8000a9c:	f7ff fe94 	bl	80007c8 <__aeabi_ddiv>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	460c      	mov	r4, r1
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	4621      	mov	r1, r4
 8000aa8:	f7ff ff76 	bl	8000998 <__aeabi_d2f>
 8000aac:	4603      	mov	r3, r0
 8000aae:	ee07 3a90 	vmov	s15, r3
}
 8000ab2:	eeb0 0a67 	vmov.f32	s0, s15
 8000ab6:	3710      	adds	r7, #16
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000abe:	bf00      	nop
 8000ac0:	4b742400 	.word	0x4b742400
 8000ac4:	40200000 	.word	0x40200000

08000ac8 <BRR_VALUE>:

int BRR_VALUE(float USART_DIV, int over8) {
 8000ac8:	b480      	push	{r7}
 8000aca:	b085      	sub	sp, #20
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	ed87 0a01 	vstr	s0, [r7, #4]
 8000ad2:	6038      	str	r0, [r7, #0]
	const int mantisa_part = USART_DIV;
 8000ad4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ad8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000adc:	ee17 3a90 	vmov	r3, s15
 8000ae0:	60bb      	str	r3, [r7, #8]
	int fractional_part = 0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60fb      	str	r3, [r7, #12]

	if(!over8) {
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d112      	bne.n	8000b12 <BRR_VALUE+0x4a>
		fractional_part = (USART_DIV - mantisa_part) * 16;
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	ee07 3a90 	vmov	s15, r3
 8000af2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000af6:	ed97 7a01 	vldr	s14, [r7, #4]
 8000afa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000afe:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8000b02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b0a:	ee17 3a90 	vmov	r3, s15
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	e011      	b.n	8000b36 <BRR_VALUE+0x6e>
	} else {
		fractional_part = (USART_DIV - mantisa_part) * 8;
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	ee07 3a90 	vmov	s15, r3
 8000b18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b1c:	ed97 7a01 	vldr	s14, [r7, #4]
 8000b20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b24:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8000b28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b30:	ee17 3a90 	vmov	r3, s15
 8000b34:	60fb      	str	r3, [r7, #12]
	}

	return (mantisa_part << 4) + fractional_part;
 8000b36:	68bb      	ldr	r3, [r7, #8]
 8000b38:	011a      	lsls	r2, r3, #4
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	4413      	add	r3, r2
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3714      	adds	r7, #20
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr

08000b4a <delay>:

void delay(int num) {
 8000b4a:	b480      	push	{r7}
 8000b4c:	b085      	sub	sp, #20
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	6078      	str	r0, [r7, #4]
	for(int i = 0; i<num; i++);
 8000b52:	2300      	movs	r3, #0
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	e002      	b.n	8000b5e <delay+0x14>
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	68fa      	ldr	r2, [r7, #12]
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	429a      	cmp	r2, r3
 8000b64:	dbf8      	blt.n	8000b58 <delay+0xe>
}
 8000b66:	bf00      	nop
 8000b68:	3714      	adds	r7, #20
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
	...

08000b74 <setUsart1Config>:

void setUsart1Config(int BRR_VALUE){
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
	RCC->APB2ENR|=RCC_APB2ENR_USART1EN;
 8000b7c:	4a1e      	ldr	r2, [pc, #120]	; (8000bf8 <setUsart1Config+0x84>)
 8000b7e:	4b1e      	ldr	r3, [pc, #120]	; (8000bf8 <setUsart1Config+0x84>)
 8000b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b82:	f043 0310 	orr.w	r3, r3, #16
 8000b86:	6453      	str	r3, [r2, #68]	; 0x44
	GPIOA->MODER&=~(GPIO_MODER_MODER9_0|GPIO_MODER_MODER10_0);
 8000b88:	4a1c      	ldr	r2, [pc, #112]	; (8000bfc <setUsart1Config+0x88>)
 8000b8a:	4b1c      	ldr	r3, [pc, #112]	; (8000bfc <setUsart1Config+0x88>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f423 13a0 	bic.w	r3, r3, #1310720	; 0x140000
 8000b92:	6013      	str	r3, [r2, #0]
	GPIOA->MODER|=(GPIO_MODER_MODER9_1|GPIO_MODER_MODER10_1);
 8000b94:	4a19      	ldr	r2, [pc, #100]	; (8000bfc <setUsart1Config+0x88>)
 8000b96:	4b19      	ldr	r3, [pc, #100]	; (8000bfc <setUsart1Config+0x88>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f443 1320 	orr.w	r3, r3, #2621440	; 0x280000
 8000b9e:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[1]=0x770;
 8000ba0:	4b16      	ldr	r3, [pc, #88]	; (8000bfc <setUsart1Config+0x88>)
 8000ba2:	f44f 62ee 	mov.w	r2, #1904	; 0x770
 8000ba6:	625a      	str	r2, [r3, #36]	; 0x24

	USART1->CR1|=USART_CR1_UE;
 8000ba8:	4a15      	ldr	r2, [pc, #84]	; (8000c00 <setUsart1Config+0x8c>)
 8000baa:	4b15      	ldr	r3, [pc, #84]	; (8000c00 <setUsart1Config+0x8c>)
 8000bac:	68db      	ldr	r3, [r3, #12]
 8000bae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000bb2:	60d3      	str	r3, [r2, #12]
	USART1->CR1|=USART_CR1_TE;
 8000bb4:	4a12      	ldr	r2, [pc, #72]	; (8000c00 <setUsart1Config+0x8c>)
 8000bb6:	4b12      	ldr	r3, [pc, #72]	; (8000c00 <setUsart1Config+0x8c>)
 8000bb8:	68db      	ldr	r3, [r3, #12]
 8000bba:	f043 0308 	orr.w	r3, r3, #8
 8000bbe:	60d3      	str	r3, [r2, #12]
	USART1->CR1|=USART_CR1_RE;
 8000bc0:	4a0f      	ldr	r2, [pc, #60]	; (8000c00 <setUsart1Config+0x8c>)
 8000bc2:	4b0f      	ldr	r3, [pc, #60]	; (8000c00 <setUsart1Config+0x8c>)
 8000bc4:	68db      	ldr	r3, [r3, #12]
 8000bc6:	f043 0304 	orr.w	r3, r3, #4
 8000bca:	60d3      	str	r3, [r2, #12]
	USART1->CR1|=USART_CR1_RXNEIE;
 8000bcc:	4a0c      	ldr	r2, [pc, #48]	; (8000c00 <setUsart1Config+0x8c>)
 8000bce:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <setUsart1Config+0x8c>)
 8000bd0:	68db      	ldr	r3, [r3, #12]
 8000bd2:	f043 0320 	orr.w	r3, r3, #32
 8000bd6:	60d3      	str	r3, [r2, #12]
	USART1->CR2=0;
 8000bd8:	4b09      	ldr	r3, [pc, #36]	; (8000c00 <setUsart1Config+0x8c>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	611a      	str	r2, [r3, #16]
	USART1->CR3=0;
 8000bde:	4b08      	ldr	r3, [pc, #32]	; (8000c00 <setUsart1Config+0x8c>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	615a      	str	r2, [r3, #20]

	USART1->BRR = BRR_VALUE;
 8000be4:	4a06      	ldr	r2, [pc, #24]	; (8000c00 <setUsart1Config+0x8c>)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6093      	str	r3, [r2, #8]
}
 8000bea:	bf00      	nop
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	40023800 	.word	0x40023800
 8000bfc:	40020000 	.word	0x40020000
 8000c00:	40011000 	.word	0x40011000

08000c04 <setUsart2Config>:

void setUsart2Config(int BRR_VALUE){
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
	RCC->APB1ENR|=RCC_APB1ENR_USART2EN;
 8000c0c:	4a1e      	ldr	r2, [pc, #120]	; (8000c88 <setUsart2Config+0x84>)
 8000c0e:	4b1e      	ldr	r3, [pc, #120]	; (8000c88 <setUsart2Config+0x84>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c16:	6413      	str	r3, [r2, #64]	; 0x40
	GPIOA->MODER&=~(GPIO_MODER_MODER2_0|GPIO_MODER_MODER3_0);
 8000c18:	4a1c      	ldr	r2, [pc, #112]	; (8000c8c <setUsart2Config+0x88>)
 8000c1a:	4b1c      	ldr	r3, [pc, #112]	; (8000c8c <setUsart2Config+0x88>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f023 0350 	bic.w	r3, r3, #80	; 0x50
 8000c22:	6013      	str	r3, [r2, #0]
	GPIOA->MODER|=(GPIO_MODER_MODER2_1|GPIO_MODER_MODER3_1);
 8000c24:	4a19      	ldr	r2, [pc, #100]	; (8000c8c <setUsart2Config+0x88>)
 8000c26:	4b19      	ldr	r3, [pc, #100]	; (8000c8c <setUsart2Config+0x88>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000c2e:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0]|=0x7700;
 8000c30:	4a16      	ldr	r2, [pc, #88]	; (8000c8c <setUsart2Config+0x88>)
 8000c32:	4b16      	ldr	r3, [pc, #88]	; (8000c8c <setUsart2Config+0x88>)
 8000c34:	6a1b      	ldr	r3, [r3, #32]
 8000c36:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8000c3a:	6213      	str	r3, [r2, #32]

	USART2->CR1|=USART_CR1_UE;
 8000c3c:	4a14      	ldr	r2, [pc, #80]	; (8000c90 <setUsart2Config+0x8c>)
 8000c3e:	4b14      	ldr	r3, [pc, #80]	; (8000c90 <setUsart2Config+0x8c>)
 8000c40:	68db      	ldr	r3, [r3, #12]
 8000c42:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c46:	60d3      	str	r3, [r2, #12]
	USART2->CR1|=USART_CR1_TE;
 8000c48:	4a11      	ldr	r2, [pc, #68]	; (8000c90 <setUsart2Config+0x8c>)
 8000c4a:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <setUsart2Config+0x8c>)
 8000c4c:	68db      	ldr	r3, [r3, #12]
 8000c4e:	f043 0308 	orr.w	r3, r3, #8
 8000c52:	60d3      	str	r3, [r2, #12]
	USART2->CR1|=USART_CR1_RE;
 8000c54:	4a0e      	ldr	r2, [pc, #56]	; (8000c90 <setUsart2Config+0x8c>)
 8000c56:	4b0e      	ldr	r3, [pc, #56]	; (8000c90 <setUsart2Config+0x8c>)
 8000c58:	68db      	ldr	r3, [r3, #12]
 8000c5a:	f043 0304 	orr.w	r3, r3, #4
 8000c5e:	60d3      	str	r3, [r2, #12]
	USART2->CR2|=0x00;
 8000c60:	4a0b      	ldr	r2, [pc, #44]	; (8000c90 <setUsart2Config+0x8c>)
 8000c62:	4b0b      	ldr	r3, [pc, #44]	; (8000c90 <setUsart2Config+0x8c>)
 8000c64:	691b      	ldr	r3, [r3, #16]
 8000c66:	6113      	str	r3, [r2, #16]
	USART2->CR3|=0x00;
 8000c68:	4a09      	ldr	r2, [pc, #36]	; (8000c90 <setUsart2Config+0x8c>)
 8000c6a:	4b09      	ldr	r3, [pc, #36]	; (8000c90 <setUsart2Config+0x8c>)
 8000c6c:	695b      	ldr	r3, [r3, #20]
 8000c6e:	6153      	str	r3, [r2, #20]

	// USART2->BRR = BRR_VALUE;
	USART2->BRR|=104<<4;
 8000c70:	4a07      	ldr	r2, [pc, #28]	; (8000c90 <setUsart2Config+0x8c>)
 8000c72:	4b07      	ldr	r3, [pc, #28]	; (8000c90 <setUsart2Config+0x8c>)
 8000c74:	689b      	ldr	r3, [r3, #8]
 8000c76:	f443 63d0 	orr.w	r3, r3, #1664	; 0x680
 8000c7a:	6093      	str	r3, [r2, #8]
}
 8000c7c:	bf00      	nop
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	40023800 	.word	0x40023800
 8000c8c:	40020000 	.word	0x40020000
 8000c90:	40004400 	.word	0x40004400

08000c94 <setSerial>:

void setSerial(int baud, int over8, int usart){
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b086      	sub	sp, #24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	60f8      	str	r0, [r7, #12]
 8000c9c:	60b9      	str	r1, [r7, #8]
 8000c9e:	607a      	str	r2, [r7, #4]
	const float USART_DIV = calcUsartDiv(baud, over8);
 8000ca0:	68b9      	ldr	r1, [r7, #8]
 8000ca2:	68f8      	ldr	r0, [r7, #12]
 8000ca4:	f7ff fec8 	bl	8000a38 <calcUsartDiv>
 8000ca8:	ed87 0a05 	vstr	s0, [r7, #20]
	const int brrValue = BRR_VALUE(USART_DIV, over8);
 8000cac:	68b8      	ldr	r0, [r7, #8]
 8000cae:	ed97 0a05 	vldr	s0, [r7, #20]
 8000cb2:	f7ff ff09 	bl	8000ac8 <BRR_VALUE>
 8000cb6:	6138      	str	r0, [r7, #16]

	switch(usart) {
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d002      	beq.n	8000cc4 <setSerial+0x30>
 8000cbe:	2b02      	cmp	r3, #2
 8000cc0:	d004      	beq.n	8000ccc <setSerial+0x38>
			break;
		case 2:
			setUsart2Config(brrValue);
			break;
	}
}
 8000cc2:	e007      	b.n	8000cd4 <setSerial+0x40>
			setUsart1Config(brrValue);
 8000cc4:	6938      	ldr	r0, [r7, #16]
 8000cc6:	f7ff ff55 	bl	8000b74 <setUsart1Config>
			break;
 8000cca:	e003      	b.n	8000cd4 <setSerial+0x40>
			setUsart2Config(brrValue);
 8000ccc:	6938      	ldr	r0, [r7, #16]
 8000cce:	f7ff ff99 	bl	8000c04 <setUsart2Config>
			break;
 8000cd2:	bf00      	nop
}
 8000cd4:	bf00      	nop
 8000cd6:	3718      	adds	r7, #24
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <sendSerial>:
	}

	return command;
}

void sendSerial(char *payload, uint8_t len, int txDelay){
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	60f8      	str	r0, [r7, #12]
 8000ce4:	460b      	mov	r3, r1
 8000ce6:	607a      	str	r2, [r7, #4]
 8000ce8:	72fb      	strb	r3, [r7, #11]
	while (!(USART2->SR & USART_SR_TXE)) {};
 8000cea:	bf00      	nop
 8000cec:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <sendSerial+0x4c>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d0f9      	beq.n	8000cec <sendSerial+0x10>

	for(uint8_t i = 0; i < len; i++){
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	75fb      	strb	r3, [r7, #23]
 8000cfc:	e00b      	b.n	8000d16 <sendSerial+0x3a>
		USART2->DR = *(payload + i);
 8000cfe:	490a      	ldr	r1, [pc, #40]	; (8000d28 <sendSerial+0x4c>)
 8000d00:	7dfb      	ldrb	r3, [r7, #23]
 8000d02:	68fa      	ldr	r2, [r7, #12]
 8000d04:	4413      	add	r3, r2
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	604b      	str	r3, [r1, #4]
		delay(txDelay);
 8000d0a:	6878      	ldr	r0, [r7, #4]
 8000d0c:	f7ff ff1d 	bl	8000b4a <delay>
	for(uint8_t i = 0; i < len; i++){
 8000d10:	7dfb      	ldrb	r3, [r7, #23]
 8000d12:	3301      	adds	r3, #1
 8000d14:	75fb      	strb	r3, [r7, #23]
 8000d16:	7dfa      	ldrb	r2, [r7, #23]
 8000d18:	7afb      	ldrb	r3, [r7, #11]
 8000d1a:	429a      	cmp	r2, r3
 8000d1c:	d3ef      	bcc.n	8000cfe <sendSerial+0x22>
	}
}
 8000d1e:	bf00      	nop
 8000d20:	3718      	adds	r7, #24
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40004400 	.word	0x40004400

08000d2c <init>:
#include "config.h"

void init(){
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
	RCC->AHB1ENR=0x87;
 8000d30:	4b03      	ldr	r3, [pc, #12]	; (8000d40 <init+0x14>)
 8000d32:	2287      	movs	r2, #135	; 0x87
 8000d34:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000d36:	bf00      	nop
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	40023800 	.word	0x40023800

08000d44 <main>:

int main(void) {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
	init();
 8000d48:	f7ff fff0 	bl	8000d2c <init>

	//BAUD, OVER8, USART_NUN
	setSerial(9600, 0, 2);
 8000d4c:	2202      	movs	r2, #2
 8000d4e:	2100      	movs	r1, #0
 8000d50:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8000d54:	f7ff ff9e 	bl	8000c94 <setSerial>

	//PAYLOAD, PAYLOAD_CHAR_LENGTH, TX_DELAY
	sendSerial("Lucas", sizeof("Lucas") - 1, 10000);
 8000d58:	f242 7210 	movw	r2, #10000	; 0x2710
 8000d5c:	2105      	movs	r1, #5
 8000d5e:	4802      	ldr	r0, [pc, #8]	; (8000d68 <main+0x24>)
 8000d60:	f7ff ffbc 	bl	8000cdc <sendSerial>

	while(1) {}
 8000d64:	e7fe      	b.n	8000d64 <main+0x20>
 8000d66:	bf00      	nop
 8000d68:	08000e8c 	.word	0x08000e8c

08000d6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000da4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000d70:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d72:	e003      	b.n	8000d7c <LoopCopyDataInit>

08000d74 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d74:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000d76:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d78:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d7a:	3104      	adds	r1, #4

08000d7c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d7c:	480b      	ldr	r0, [pc, #44]	; (8000dac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000d7e:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000d80:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d82:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d84:	d3f6      	bcc.n	8000d74 <CopyDataInit>
  ldr  r2, =_sbss
 8000d86:	4a0b      	ldr	r2, [pc, #44]	; (8000db4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000d88:	e002      	b.n	8000d90 <LoopFillZerobss>

08000d8a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000d8a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d8c:	f842 3b04 	str.w	r3, [r2], #4

08000d90 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d90:	4b09      	ldr	r3, [pc, #36]	; (8000db8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000d92:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d94:	d3f9      	bcc.n	8000d8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d96:	f000 f813 	bl	8000dc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d9a:	f000 f847 	bl	8000e2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d9e:	f7ff ffd1 	bl	8000d44 <main>
  bx  lr    
 8000da2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000da4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000da8:	08000e9c 	.word	0x08000e9c
  ldr  r0, =_sdata
 8000dac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000db0:	20000000 	.word	0x20000000
  ldr  r2, =_sbss
 8000db4:	20000000 	.word	0x20000000
  ldr  r3, = _ebss
 8000db8:	2000001c 	.word	0x2000001c

08000dbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dbc:	e7fe      	b.n	8000dbc <ADC_IRQHandler>
	...

08000dc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dc4:	4a16      	ldr	r2, [pc, #88]	; (8000e20 <SystemInit+0x60>)
 8000dc6:	4b16      	ldr	r3, [pc, #88]	; (8000e20 <SystemInit+0x60>)
 8000dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000dd4:	4a13      	ldr	r2, [pc, #76]	; (8000e24 <SystemInit+0x64>)
 8000dd6:	4b13      	ldr	r3, [pc, #76]	; (8000e24 <SystemInit+0x64>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f043 0301 	orr.w	r3, r3, #1
 8000dde:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000de0:	4b10      	ldr	r3, [pc, #64]	; (8000e24 <SystemInit+0x64>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000de6:	4a0f      	ldr	r2, [pc, #60]	; (8000e24 <SystemInit+0x64>)
 8000de8:	4b0e      	ldr	r3, [pc, #56]	; (8000e24 <SystemInit+0x64>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000df0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000df4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000df6:	4b0b      	ldr	r3, [pc, #44]	; (8000e24 <SystemInit+0x64>)
 8000df8:	4a0b      	ldr	r2, [pc, #44]	; (8000e28 <SystemInit+0x68>)
 8000dfa:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000dfc:	4a09      	ldr	r2, [pc, #36]	; (8000e24 <SystemInit+0x64>)
 8000dfe:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <SystemInit+0x64>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e06:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000e08:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <SystemInit+0x64>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e0e:	4b04      	ldr	r3, [pc, #16]	; (8000e20 <SystemInit+0x60>)
 8000e10:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e14:	609a      	str	r2, [r3, #8]
#endif
}
 8000e16:	bf00      	nop
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	e000ed00 	.word	0xe000ed00
 8000e24:	40023800 	.word	0x40023800
 8000e28:	24003010 	.word	0x24003010

08000e2c <__libc_init_array>:
 8000e2c:	b570      	push	{r4, r5, r6, lr}
 8000e2e:	4e0d      	ldr	r6, [pc, #52]	; (8000e64 <__libc_init_array+0x38>)
 8000e30:	4c0d      	ldr	r4, [pc, #52]	; (8000e68 <__libc_init_array+0x3c>)
 8000e32:	1ba4      	subs	r4, r4, r6
 8000e34:	10a4      	asrs	r4, r4, #2
 8000e36:	2500      	movs	r5, #0
 8000e38:	42a5      	cmp	r5, r4
 8000e3a:	d109      	bne.n	8000e50 <__libc_init_array+0x24>
 8000e3c:	4e0b      	ldr	r6, [pc, #44]	; (8000e6c <__libc_init_array+0x40>)
 8000e3e:	4c0c      	ldr	r4, [pc, #48]	; (8000e70 <__libc_init_array+0x44>)
 8000e40:	f000 f818 	bl	8000e74 <_init>
 8000e44:	1ba4      	subs	r4, r4, r6
 8000e46:	10a4      	asrs	r4, r4, #2
 8000e48:	2500      	movs	r5, #0
 8000e4a:	42a5      	cmp	r5, r4
 8000e4c:	d105      	bne.n	8000e5a <__libc_init_array+0x2e>
 8000e4e:	bd70      	pop	{r4, r5, r6, pc}
 8000e50:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e54:	4798      	blx	r3
 8000e56:	3501      	adds	r5, #1
 8000e58:	e7ee      	b.n	8000e38 <__libc_init_array+0xc>
 8000e5a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e5e:	4798      	blx	r3
 8000e60:	3501      	adds	r5, #1
 8000e62:	e7f2      	b.n	8000e4a <__libc_init_array+0x1e>
 8000e64:	08000e94 	.word	0x08000e94
 8000e68:	08000e94 	.word	0x08000e94
 8000e6c:	08000e94 	.word	0x08000e94
 8000e70:	08000e98 	.word	0x08000e98

08000e74 <_init>:
 8000e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e76:	bf00      	nop
 8000e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e7a:	bc08      	pop	{r3}
 8000e7c:	469e      	mov	lr, r3
 8000e7e:	4770      	bx	lr

08000e80 <_fini>:
 8000e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e82:	bf00      	nop
 8000e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e86:	bc08      	pop	{r3}
 8000e88:	469e      	mov	lr, r3
 8000e8a:	4770      	bx	lr
